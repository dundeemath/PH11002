[
  {
    "objectID": "03-heuristics.html",
    "href": "03-heuristics.html",
    "title": "3  Heuristics",
    "section": "",
    "text": "3.1 What is a heuristic?\nA heuristic is a problem-solving device or strategy that provides a way to seeing or approaching a problem. Choosing a suitable heuristic often leads us closer to a solution. These strategies are versatile, applying across a wide range of domains and topics. However, heuristics alone are not enough to solve a problem; they must be combined with relevant knowledge and a refined ability to select and deploy mathematical resources effectively. By explicitly discussing and reflecting on problem-solving strategies, we aim to bring the use of heuristics into your conscious awareness. This focus will help you create connections between different areas of mathematical knowledge and enhance your reasoning skills. By honing these abilities, you will be equipped with the tools necessary to become a proficient and literate problem solver.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Heuristics</span>"
    ]
  },
  {
    "objectID": "03-heuristics.html#what-is-a-heuristic",
    "href": "03-heuristics.html#what-is-a-heuristic",
    "title": "3  Heuristics",
    "section": "",
    "text": "Heuristics will not replace shaky mastery of a subject!\n\n\n\n“Despite the fact that their application cuts across various mathematical domains, the successful implementation of heuristic strategies in any particular domain often depends heavily on the possession of specific subject matter knowledge.” (Schoenfeld 1985)",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Heuristics</span>"
    ]
  },
  {
    "objectID": "03-heuristics.html#compendium-of-heuristics",
    "href": "03-heuristics.html#compendium-of-heuristics",
    "title": "3  Heuristics",
    "section": "3.2 Compendium of heuristics",
    "text": "3.2 Compendium of heuristics\nBelow we include a collection of common heuristics, grouped by theme. Each of these heuristics should be viewed as a label for a closely related family of devices. That is, each heuristic in the compendium is not precise enough to allow for unambiguous interpretation or application to a particular problem! Key challenges that arise when trying to apply any of these heuristics is firstly to select appropriately and second to decompose the heuristic into a targeted strategy that you can actually execute. Use the prompts to trigger action.\nFor each heuristic we have indicated a source: (P) = after Pólya (Pólya 1945); (M) = after Mahajan (Mahajan 2010); (MF) = after (Michalewicz and Fogel 2004); (Z) = after (Zeitz 2016). The list is not exhaustive.\n\nVariation of the problem\n\n\n\n\n\n\nDecomposing and recombining (P, Z)\n\n\n\n\n\nBreak the task into subproblems (lemmas, cases), solve pieces, then reassemble.\nPrompts: What minimal subgoal would help? Can I prove a lemma that reduces the main load?\n\n\n\n\n\n\n\n\n\nEstablishing and using subgoals (P, Z)\n\n\n\n\n\nName intermediate targets that make progress observable.\nPrompts: What would I need to show to make the last step trivial?\n\n\n\n\n\n\n\n\n\nGeneralisation (P, Z)\n\n\n\n\n\nWiden the problem to expose structure (a parameter, a family).\nPrompts: If n were real/complex/d-dimensional, what pattern emerges?\n\n\n\n\n\n\n\n\n\nSpecialisation (P, Z)\n\n\n\n\n\nTest instructive instances (small, extreme, symmetric).\nPrompts: What happens for n = 1, 2, 3? For an extreme or degenerate case?\nNote: Trying special cases can suggest both direction and plausibility of a solution (S).\n\n\n\n\n\n\n\n\n\nAnalogy (P, M, Z)\n\n\n\n\n\nMap the problem to a known cousin and import its method.\nPrompts: What solved problem has the same backbone (invariant, recurrence, symmetry)?\n\n\n\n\n\nAuxiliary\n\n\n\n\n\n\nAuxiliary elements (P, Z)\n\n\n\n\n\nIntroduce a helper variable/point/construction (e.g., an extra line in a diagram, a slack variable).\nPrompts: What new object would make the relation linear or symmetric?\n\n\n\n\n\n\n\n\n\nAuxiliary problem (P, Z)\n\n\n\n\n\nSolve a carefully chosen easier or nearby problem, then adapt.\nPrompts: What relaxation or stronger statement is tractable?\n\n\n\n\n\nRepresentation\n\n\n\n\n\n\nNotation (P, Z)\n\n\n\n\n\nChoose symbols that expose structure (indices, function names, operators). Rename until the pattern is visible.\nPrompts: Can I re-index or re-parameterise to simplify sums or products?\n\n\n\n\n\n\n\n\n\nFigures (P, Z)\n\n\n\n\n\nDraw to think: diagrams, timelines, tables, state graphs. Iterate the figure as the plan evolves.\nPrompts: What picture would let me see the invariant or the bottleneck?\n\n\n\n\n\n\n\n\n\nSetting up equations (P, Z)\n\n\n\n\n\nTranslate words to algebra/constraints/recurrences. Define variables cleanly and encode conditions faithfully.\nPrompts: What are the unknowns, and what relations tie them together?\n\n\n\n\n\nVerification\n\n\n\n\n\n\nExamine your guess (P, Z)\n\n\n\n\n\nConjecture, then interrogate it (“invent then verify”). Try counterexamples or edge cases; refine if it survives.\nPrompts: What would falsify my guess quickest?\n\n\n\n\n\n\n\n\n\nCheck the result (P, Z)\n\n\n\n\n\nVerify against all conditions; try alternative derivations; sanity-check units and orders of magnitude.\nPrompts: Does this fail for any small or extreme case? Can I justify uniqueness or optimality?\n\n\n\n\n\n\n\n\n\nType checking and dimensional analysis (P, M)\n\n\n\n\n\nEnsure expressions have the right kind: units, dimensions, domains, monotonicity.\nPrompts: Do both sides have the same units/type? What scales does the answer depend on?\n\n\n\n\n\nInference\n\n\n\n\n\n\nWorking backwards (P, Z)\n\n\n\n\n\nStart from the goal and seek necessary predecessors. Useful for equations, constructions, and proofs by equivalence.\nPrompts: If the claim were true, what must also be true one step earlier?\n\n\n\n\n\n\n\n\n\nIndirect proof (P, Z)\n\n\n\n\n\nAssume the opposite; derive a contradiction (impossible inequality, parity clash, minimal counterexample loop).\nPrompts: What invariant would be violated if the claim were false?\nNote: also called reductio ad absurdum.\n\n\n\n\n\nModern/computational\n\n\n\n\n\n\nApproximation (M)\n\n\n\n\n\nReplace an intractable object with a manageable surrogate (linearisation, asymptotics, bounding, surrogate loss).\nPrompts: What can I ignore or approximate without changing the leading behaviour?\n\n\n\n\n\n\n\n\n\nEstimation (M)\n\n\n\n\n\nGet ballpark numbers (orders of magnitude, back-of-envelope). Use to choose plans and catch nonsense early.\nPrompts: What’s a plausible scale? Is my result within it?\n\n\n\n\n\n\n\n\n\nExhaustive search (MF)\n\n\n\n\n\nSystematically enumerate candidates (with pruning).\nPrompts: How can I bound the search space? What constraints let me cut branches?\n\n\n\n\n\n\n\n\n\nGreedy algorithms (MF)\n\n\n\n\n\nMake the best local choice at each step; accept that it may be suboptimal globally.\nPrompts: What local score aligns with the global objective?\n\n\n\n\n\n\n\n\n\nRandomisation and probabilistic methods (MF)\n\n\n\n\n\nUse randomness to prove existence, estimate quantities, or guide search.\nPrompts: What random construction has the right expectation? Can sampling expose the pattern?\n\n\n\n\n\n\n\n\n\nNeural Networks / learned heuristics (MF)\n\n\n\n\n\nUse a trained model to guide search and propose candidates or rank moves (proof search, construction hints).\nPrompts: What features or examples could a model learn from? How do I verify its suggestions?\n\n\n\n\n\n\n\n\n\nMahajan, Sanjoy. 2010. Street-Fighting Mathematics: The Art of Educated Guessing and Opportunistic Problem Solving. Cambridge, MA: The MIT Press. https://doi.org/10.7551/mitpress/7728.001.0001.\n\n\nMichalewicz, Zbigniew, and David B. Fogel. 2004. How to Solve It: Modern Heuristics. 2nd ed. Berlin, Heidelberg: Springer. https://doi.org/10.1007/978-3-662-07807-5.\n\n\nPólya, George. 1945. How to Solve It. Princeton, NJ: Princeton University Press.\n\n\nSchoenfeld, Alan H. 1985. Mathematical Problem Solving. Orlando, FL: Academic Press. https://doi.org/10.1016/C2013-0-05012-8.\n\n\nZeitz, Paul. 2016. The Art and Craft of Problem Solving. 3rd ed. Hoboken, NJ: Wiley.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Heuristics</span>"
    ]
  },
  {
    "objectID": "01-purpose.html",
    "href": "01-purpose.html",
    "title": "1  Purpose",
    "section": "",
    "text": "What are we here for?\n\n\n\n“[T]he mathematician’s main reason for existence is to solve problems […] therefore, what mathematics really consists of is problems and solutions” (Halmos 1980).\n\n\nThroughout your mathematics and scientific journey, you have likely faced a variety of problems that provided essential context to guide you toward the “appropriate” solution methods. Typically, you encounter a specific topic, technique, or method, followed by a series of related exercises that reinforce that concept. While this approach can be beneficial for solidifying your understanding, it can also be somewhat disconnected from real-world challenges. In reality, problems often integrate multiple concepts and span various areas of mathematics, requiring a more holistic application of your knowledge.\nIn this module, we want to develop skills that help you to solve problems more generally. This will be done by engaging with tasks for which the solution method is not known in advance. To get good at attacking such open-ended tasks, you will also learn to reflect on your experiences and problem solving processes. This is because problem-solving is not simply a product of your mathematical resources (i.e., what you know), it is also a function of your perceptions of that knowledge that you derive from your experiences with mathematics (Schoenfeld 1985).\nIn this module, our focus is on developing skills that enhance your ability to solve problems in a broader context. We will achieve this by working on tasks for which the solution methods are not known in advance. To excel in tackling these open-ended challenges, you will also engage in reflecting on your experiences and the processes you use for problem-solving. This is essential because effective problem-solving relies not only on your mathematical resources, i.e., what you know, but also on how you perceive that knowledge (Schoenfeld 1985). Your perception of mathematics is influenced by your experiences, and a key aspect of this module will involve engaging in problem-solving tasks, both individually and collaboratively, and reflecting on these experiences to enhance your learning.\nThe purpose of this problem solving module is to:\n\nbuild your confidence in solving unseen problems,\nprovide prompts to support reflection that will deepen your perception of mathematical knowledge (and its interconnections),\ngive generic support scaffolding problem solving (vs scaffolding the problem) that will provide a foundation for your development as a mathematician and scientist.\n\n\n\n\n\n\n\nHalmos, P. R. 1980. “The Heart of Mathematics.” The American Mathematical Monthly 87 (7): 519–24. https://doi.org/10.2307/2321415.\n\n\nSchoenfeld, Alan H. 1985. Mathematical Problem Solving. Orlando, FL: Academic Press. https://doi.org/10.1016/C2013-0-05012-8.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Purpose</span>"
    ]
  },
  {
    "objectID": "02-problems.html",
    "href": "02-problems.html",
    "title": "2  Problems",
    "section": "",
    "text": "2.1 Two Types of Problems\nProblems often involve more complexity than straightforward exercises in that the method of solution is not proscribed. We will differentiate between two types of problems and present a general framework, introduced by Pólya in a series of monographs (Pólya 1945, 1954a, 1954b), for understanding problem solving. This framework is intended to serve as a foundation for analysing your approach to problem solving.\nWe distinguish between different types of problems based on the desired goal.\nProblems to find. The task is to produce or create an object that satisfies specified conditions, which may include a number, function, construction, example, counterexample, or algorithm. Common prompts for these tasks include terms such as determine, compute, construct, and classify. The success of these endeavors is evaluated based on criteria such as correctness, completeness, and in some cases, optimality or uniqueness.\nProblems to prove. The task is to justify a claim beyond reasonable doubt. Typical prompts include: show, prove, disprove, establish, and deduce. To be successful, one must ensure validity, clarity, and appropriate use of definitions and prior results.\nIn this module, we will focus on problems to find.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Problems</span>"
    ]
  },
  {
    "objectID": "02-problems.html#two-types-of-problems",
    "href": "02-problems.html#two-types-of-problems",
    "title": "2  Problems",
    "section": "",
    "text": "Example of a problem to find\n\n\n\nFind all integers n such that n(n+1) is a perfect square.\n\n\n\n\n\n\n\n\n\nExample of a problem to prove\n\n\n\nProve there are infinitely many primes congruent to \\;3\\mod 4.\n\n\n\n\n\n\n\n\nMany problems mix both tasks!\n\n\n\nFind all objects with property P and prove your list is complete.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Problems</span>"
    ]
  },
  {
    "objectID": "02-problems.html#problem-solving-framework",
    "href": "02-problems.html#problem-solving-framework",
    "title": "2  Problems",
    "section": "2.2 Problem solving framework",
    "text": "2.2 Problem solving framework\nThe problem solving framework (see Pólya 1945) is a four-phase cycle for tackling open-ended problems. The phases of the problem solving framework are depicted in Figure 2.1; the name of each phase is listed in bold text, with key terms in normal text. Knowing which phase of the framework you are in may help you choose the best prompt to move forward (see the table below in Section 2.3).\n\n\n\n\n\n\n%%{init: { \"flowchart\": { \"htmlLabels\": false } }}%%\n\nflowchart TB\n  U[**Understand the problem**&lt;br&gt;Unknowns, Data, Constraints]\n  P[**Devise a plan**&lt;br&gt;Heuristics]\n  C[**Carry out the plan**&lt;br&gt;Justify steps, Check subgoals]\n  L[**Look back**&lt;br&gt;Verify, Reflect, Generalise]\n\n  U --&gt; P --&gt; C --&gt; L\n\n\n\n\nFigure 2.1: Four phases of problem solving.\n\n\n\n\n\nThe phases are roughly as follows. First, understand the problem: identify givens, unknowns, and conditions; restate it in your own words; sketch, tabulate, or probe small cases. Next, devise a plan by choosing a route. Possible routes are to work backward, look for patterns, simplify or specialise, use symmetry or invariants, introduce an auxiliary object, estimate or bound, change representation, or reduce to a known problem (we will investigate these problem solving heuristics later in Chapter 3). Then carry out your plan: execute cleanly, justify each step, check subgoals, and pivot if a step stalls. Finally, look back: verify the result, test edge cases, assess efficiency and clarity, and capture the key idea. The final phase is essential. Use the framework to reflect on what you learned so your future problem solving gets faster and more reliable.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Problems</span>"
    ]
  },
  {
    "objectID": "02-problems.html#sec-phases",
    "href": "02-problems.html#sec-phases",
    "title": "2  Problems",
    "section": "2.3 Phases of problem solving",
    "text": "2.3 Phases of problem solving\nUse Table Table 2.1 as a working checklist and a reflection guide, not a rigid recipe. As you tackle an open-ended problem, you might find that you are “stuck”. First, don’t panic! Decide which phase of the problem solving framework you are in and scan the prompts in that row. Answering the prompt may lead to a concrete next action. Reflect on this new action for a few minutes; if it stalls, return to the table, pick a different prompt, or take a break. Over time, the prompts will become more familiar and the process of solving an open-ended problme will be less daunting.\n\n\n\n\nTable 2.1: Phases of problem solving, adapted from (Pólya 1945, xvi–xvii).\n\n\n\n\n\n\nPhase\nPurpose\nPrompts to ask yourself\nUseful tactics\n\n\n\n\nUnderstanding the problem\nFor a problem to find, understand the problem by making the unknown, data, and conditions precise.\nWhat is unknown? What is given or what are the data? What conditions/constraints apply? Can I restate the task in my own words? What do small or extreme cases look like? What diagram/notation will help?\nDefine symbols. Draw a figure. List constraints. Test tiny cases. Identify edge cases. Rephrase the question. Separate various parts of the condition.\n\n\nDevising a plan\nFind the connection between the data and the unknown that provides a path towards a solution.\nHave I seen the problem before? Have I seen the same problem in a slightly different form? Do I know a related problem? Do I know a theorem that might be useful? Can I work backward from the goal? Can I simplify/specialise first? What pattern, invariant, or symmetry might apply? Can I introduce an auxiliary element or change representation? Did I use all the data in devising my plan? Did I account for all the conditions?\nHeuristics such as analogy; special/edge cases; generalisation; using invariants and symmetry; bounding/estimating; pigeonhole; substitution; set up equations or a new diagram.\n\n\nCarry out your plan\nCarry out plan, checking each step!\nWould I be able to clearly explain that the step is correct? Can I prove that it is correct? Does each step follow from assumptions or known results? What subgoal can I verify now? If a step fails, which alternative route will I try next?\nJustify steps. Prove lemmas. Compute carefully. Frequently take stock (checkpoint). Pivot quickly if a line of attack stalls. Don't panic.\n\n\nLook back\nValidate the result and reflect on learning.\nCan I check the result? Can you explain your arguments? Does the result meet all conditions? Any counterexamples? Is it complete/optimal? Can I shorten or generalise the solution? Can I derive the result differently? What key idea made it work, and where else could it apply?\nRecord the central insight. Phases of the framework. Prompts answered. Heuristics used and how.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOxford English Dictionary. 1989. 2nd ed. Oxford: Oxford University Press.\n\n\nPólya, George. 1945. How to Solve It. Princeton, NJ: Princeton University Press.\n\n\n———. 1954a. Mathematics and Plausible Reasoning, Volume 1: Induction and Analogy in Mathematics. Princeton, NJ: Princeton University Press.\n\n\n———. 1954b. Mathematics and Plausible Reasoning, Volume 2: Logic, Symbolic and Mathematical. Princeton, NJ: Princeton University Press.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Problems</span>"
    ]
  },
  {
    "objectID": "04-attitudes.html",
    "href": "04-attitudes.html",
    "title": "4  Attitudes",
    "section": "",
    "text": "4.1 Selecting and pursuing an approach\nEffective problem solvers masterfully balance curiosity with discipline. They begin by probing, playing, and hypothesizing, then move on to justifying, checking, and reflecting on their findings. According to Pólya, true progress originates from cycling through the four problem-solving phases, maintaining a keen awareness of one’s actions, and a readiness to adapt when new evidence arises (Pólya 1945). When progress stalls, adept problem solvers pivot swiftly and consistently take time to “look back” at their process.\nBegin by matching structure to strategy. Let the problem’s cues choose the method: a recurrence invites induction; symmetry points toward invariants; a geometric flavour asks for a diagram and auxiliary elements; unruly numbers suggest estimation or approximation.\nThen commit to a strategy, but keep your course of action time-bound. Choose one plan and pursue it deliberately for a few minutes. Set a concrete checkpoint in advance so the decision to switch is not emotional or driven by frustration (“If I cannot determine the number of cases in twenty minutes, I will try another approach.”).\nFinally, watch for traction. You are on the right track if relations clarify, expressions simplify, or the number of cases shrinks. If instead the algebra gets tedious, cases proliferate, or your reasoning seems circular: stop, reframe the problem, and select a different strategy.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Attitudes</span>"
    ]
  },
  {
    "objectID": "04-attitudes.html#still-stuck",
    "href": "04-attitudes.html#still-stuck",
    "title": "4  Attitudes",
    "section": "4.2 Still stuck?",
    "text": "4.2 Still stuck?\n\n\n\n\n\n\nTry answering these questions:\n\n\n\n\nWhat exactly are you doing? Can you describe it precisely?\nWhy are you doing it? How does it fit into the solution?\nHow does it help you? What will you do with the outcome when you obtain it?\n\n(see Schoenfeld 1985).\n\n\n\n\n\n\n\n\nPólya, George. 1945. How to Solve It. Princeton, NJ: Princeton University Press.\n\n\nSchoenfeld, Alan H. 1985. Mathematical Problem Solving. Orlando, FL: Academic Press. https://doi.org/10.1016/C2013-0-05012-8.",
    "crumbs": [
      "Problem Solving",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Attitudes</span>"
    ]
  },
  {
    "objectID": "09-references.html",
    "href": "09-references.html",
    "title": "References",
    "section": "",
    "text": "Halmos, P. R. 1980. “The Heart of Mathematics.” The\nAmerican Mathematical Monthly 87 (7): 519–24. https://doi.org/10.2307/2321415.\n\n\nMahajan, Sanjoy. 2010. Street-Fighting Mathematics: The Art of\nEducated Guessing and Opportunistic Problem Solving. Cambridge, MA:\nThe MIT Press. https://doi.org/10.7551/mitpress/7728.001.0001.\n\n\nMichalewicz, Zbigniew, and David B. Fogel. 2004. How to Solve It: Modern Heuristics. 2nd ed.\nBerlin, Heidelberg: Springer. https://doi.org/10.1007/978-3-662-07807-5.\n\n\nOxford English Dictionary. 1989. 2nd ed. Oxford: Oxford\nUniversity Press.\n\n\nPólya, George. 1945. How to Solve\nIt. Princeton, NJ: Princeton University Press.\n\n\n———. 1954a. Mathematics and Plausible Reasoning, Volume 1: Induction\nand Analogy in Mathematics. Princeton, NJ: Princeton University\nPress.\n\n\n———. 1954b. Mathematics and Plausible Reasoning, Volume 2: Logic,\nSymbolic and Mathematical. Princeton, NJ: Princeton University\nPress.\n\n\nSchoenfeld, Alan H. 1985. Mathematical Problem Solving.\nOrlando, FL: Academic Press. https://doi.org/10.1016/C2013-0-05012-8.\n\n\nZeitz, Paul. 2016. The Art and Craft of Problem Solving. 3rd\ned. Hoboken, NJ: Wiley.",
    "crumbs": [
      "Problem Solving",
      "References"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Problem Solving and Professional Skills",
    "section": "",
    "text": "Introduction\nWelcome to PH11002 Problem Solving and Professional Skills at the University of Dundee.\nThese notes are available at dundeemath.github.io/PH11002/ as HTML and also as a PDF.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#licence",
    "href": "index.html#licence",
    "title": "Problem Solving and Professional Skills",
    "section": "Licence",
    "text": "Licence\n\nThis work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.",
    "crumbs": [
      "Introduction"
    ]
  }
]