{
  "hash": "0adee2752223a43399138ae11a5ce154",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n::: {.content-hidden when-format=\"pdf\"}\n\\newcommand{\\E}{\\mathbf{E}} \n\\DeclareMathOperator{\\Var}{Var}\n\\DeclareMathOperator{\\Cov}{Cov}\n\\DeclareMathOperator{\\corr}{corr}\n\\DeclareMathOperator{\\sd}{sd}\n\\newcommand{\\se}{\\mathsf{se}}\n:::\n\n\n# Heuristics {#sec-heuristics}\n\n> \"This principle is so perfectly general that no particular application of it is possible.\" \n-- George Pólya [@MacTutor:Polya]\n\n## What is a heuristic?\n\nA *heuristic* is a problem-solving device or strategy that provides a way to seeing or approaching a problem. Choosing a suitable heuristic often leads us closer to a solution. These strategies are versatile, applying across a wide range of domains and topics. However, heuristics alone are not enough to solve a problem; they must be combined with relevant knowledge and a refined ability to select and deploy mathematical resources effectively. By explicitly discussing and reflecting on problem-solving strategies, we aim to bring the use of heuristics into your conscious awareness. This focus will help you create connections between different areas of mathematical knowledge and enhance your reasoning skills. By honing these abilities, you will be equipped with the tools necessary to become a proficient and literate problem solver.\n\n::: callout-warning\n## Heuristics will not replace shaky mastery of a subject!\n\n\"Despite the fact that their application cuts across various mathematical domains, the successful implementation of heuristic strategies in any particular domain often depends heavily on the possession of specific subject matter knowledge.\" [@Schoenfeld:1985ps]\n:::\n\n## Compendium of heuristics\n\nBelow we include a collection of common heuristics, grouped by theme. Each of these heuristics should be viewed as a label for a closely related family of devices. That is, each heuristic in the compendium is not precise enough to allow for unambiguous interpretation or application to a particular problem! Key challenges that arise when trying to apply any of these heuristics is firstly to select appropriately and second to decompose the heuristic into a targeted strategy that you can actually execute. Use the prompts to trigger action. \n\nFor each heuristic we have indicated a source: (P) = after Pólya [@Polya:1945hu]; (M) = after Mahajan [@Mahajan:2010ps]; (MF) = after [@MichalewiczFogel:2004hu]; (Z) = after [@Zeitz:2016ps]. The list is not exhaustive.\n\n### Variation of the problem {-}\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Decomposing and recombining (P, Z) {#h-decomposing-recombining}\n\nBreak the task into subproblems (lemmas, cases), solve pieces, then reassemble.\n\n_Prompts_: What minimal subgoal would help? Can I prove a lemma that reduces the main load?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Establishing and using subgoals (P, Z) {#h-establishing-subgoals}\n\nName intermediate targets that make progress observable.\n\n_Prompts_: What would I need to show to make the last step trivial?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Generalisation (P, Z) {#h-generalisation}\n\nWiden the problem to expose structure (a parameter, a family).\n\n_Prompts_: If $n$ were real/complex/$d$-dimensional, what pattern emerges?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Specialisation (P, Z) {#h-specialisation}\n\nTest instructive instances (small, extreme, symmetric).\n\n_Prompts_: What happens for $n = 1, 2, 3$? For an extreme or degenerate case?\n  \nNote: Trying special cases can suggest both direction and plausibility of a solution (S).\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Analogy (P, M, Z) {#h-analogy}\n\nMap the problem to a known cousin and import its method.\n\n_Prompts_: What solved problem has the same backbone (invariant, recurrence, symmetry)?\n:::\n\n### Auxiliary {-}\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Auxiliary elements (P, Z) {#h-auxiliary-elements}\n\nIntroduce a helper variable/point/construction (e.g., an extra line in a diagram, a slack variable).\n\n_Prompts_: What new object would make the relation linear or symmetric?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Auxiliary problem (P, Z) {#h-auxiliary-problem}\n\nSolve a carefully chosen easier or nearby problem, then adapt.\n\n_Prompts_: What relaxation or stronger statement is tractable?\n:::\n  \n### Representation {-}\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Notation (P, Z) {#h-notation}\n\nChoose symbols that expose structure (indices, function names, operators). Rename until the pattern is visible.\n\n_Prompts_: Can I re-index or re-parameterise to simplify sums or products?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Figures (P, Z) {#h-figures}\n\nDraw to think: diagrams, timelines, tables, state graphs. Iterate the figure as the plan evolves.\n\n_Prompts_: What picture would let me see the invariant or the bottleneck?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Setting up equations (P, Z) {#h-setting-equations}\n\nTranslate words to algebra/constraints/recurrences. Define variables cleanly and encode conditions faithfully.\n\n_Prompts_: What are the unknowns, and what relations tie them together?\n:::\n  \n### Verification {-}\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Examine your guess (P, Z) {#h-examine-guess}\n\nConjecture, then interrogate it (\"invent then verify\"). Try counterexamples or edge cases; refine if it survives.\n\n_Prompts_: What would falsify my guess quickest?\n:::\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Check the result (P, Z) {#h-check-result}\n\nVerify against all conditions; try alternative derivations; sanity-check units and orders of magnitude.\n\n_Prompts_: Does this fail for any small or extreme case? Can I justify uniqueness or optimality?\n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Type checking and dimensional analysis (P, M) {#h-type-checking}\n\nEnsure expressions have the right kind: units, dimensions, domains, monotonicity.\n\n_Prompts_: Do both sides have the same units/type? What scales does the answer depend on?\n:::\n  \n### Inference {-}\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Working backwards (P, Z) {#h-working-backwards}\n\nStart from the goal and seek necessary predecessors. Useful for equations, constructions, and proofs by equivalence.\n\n_Prompts_: If the claim were true, what must also be true one step earlier?\n:::\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Indirect proof (P, Z) {#h-reductio}\n\nAssume the opposite; derive a contradiction (impossible inequality, parity clash, minimal counterexample loop).\n\n_Prompts_: What invariant would be violated if the claim were false?\n\nNote: also called _reductio ad absurdum_. \n:::\n\n### Modern/computational {-}\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Approximation (M) {#h-approximation}\n\nReplace an intractable object with a manageable surrogate (linearisation, asymptotics, bounding, surrogate loss).\n\n_Prompts_: What can I ignore or approximate without changing the leading behaviour?\n:::\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Estimation (M) {#h-estimation}\n\nGet ballpark numbers (orders of magnitude, back-of-envelope). Use to choose plans and catch nonsense early.\n\n_Prompts_: What’s a plausible scale? Is my result within it?\n:::\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Exhaustive search (MF) {#h-exhaustive-search}\n\nSystematically enumerate candidates (with pruning).\n\n_Prompts_: How can I bound the search space? What constraints let me cut branches?\n:::\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Greedy algorithms (MF) {#h-greedy}\n\nMake the best local choice at each step; accept that it may be suboptimal globally.\n\n_Prompts_: What local score aligns with the global objective? \n:::\n  \n::: {.callout-note icon=false collapse=\"true\"}\n## Randomisation and probabilistic methods (MF) {#h-prob-method}\n\nUse randomness to prove existence, estimate quantities, or guide search.\n\n_Prompts_: What random construction has the right expectation? Can sampling expose the pattern?\n:::\n\n::: {.callout-note icon=false collapse=\"true\"}\n## Neural Networks / learned heuristics (MF) {#h-neural-networks}\n\nUse a trained model to guide search and propose candidates or rank moves (proof search, construction hints).\n\n_Prompts_: What features or examples could a model learn from? How do I verify its suggestions?\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}