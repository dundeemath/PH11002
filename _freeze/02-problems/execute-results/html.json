{
  "hash": "b6bafcededf72824da101bc6aa961258",
  "result": {
    "engine": "knitr",
    "markdown": "\n\n::: {.content-hidden when-format=\"pdf\"}\n\\newcommand{\\E}{\\mathbf{E}} \n\\DeclareMathOperator{\\Var}{Var}\n\\DeclareMathOperator{\\Cov}{Cov}\n\\DeclareMathOperator{\\corr}{corr}\n\\DeclareMathOperator{\\sd}{sd}\n\\newcommand{\\se}{\\mathsf{se}}\n:::\n\n\n# Problems {#sec-problems}\n\n> \"Problem. A doubtful or difficult question; a matter of inquiry, discussion, or thought; a question that exercises the mind.\" [@OED:1989ps]\n\nProblems often involve more complexity than straightforward exercises in that the method of solution is not proscribed. We will differentiate between two  types of problems and present a general framework, introduced by Pólya in a series of monographs [@Polya:1945hu; @Polya:1954oi; @Polya:1954ii], for understanding problem solving. This framework is intended to serve as a foundation for analysing your approach to problem solving.\n\n## Two Types of Problems\n\nWe distinguish between different types of problems based on the desired goal. \n\n**Problems to find.** The task is to produce or create an object that satisfies specified conditions, which may include a number, function, construction, example, counterexample, or algorithm. \nCommon prompts for these tasks include terms such as determine, compute, construct, and classify. The success of these endeavors is evaluated based on criteria such as correctness, completeness, and in some cases, optimality or uniqueness.\n\n:::{.callout-note}\n## Example of a problem to find\n\nFind all integers $n$ such that $n(n+1)$ is a perfect square.\n:::\n\n**Problems to prove.** The task is to justify a claim beyond reasonable doubt. Typical prompts include: show, prove, disprove, establish, and deduce. To be successful, one must ensure validity, clarity, and appropriate use of definitions and prior results.\n\n:::{.callout-note}\n## Example of a problem to prove\n\nProve there are infinitely many primes congruent to  $\\;3\\mod 4$.\n:::\n\n:::{.callout-warning}\n## Many problems mix both tasks! \n\nFind all objects with property $P$ and prove your list is complete.\n:::\n\nIn this module, we will focus on _problems to find_. \n\n## Problem solving framework\n\nThe problem solving framework [see @Polya:1945hu] is a four-phase cycle for tackling open-ended problems. The phases of the problem solving framework are depicted in [@fig-phases]; the name of each phase is listed in bold text, with key terms in normal text. Knowing which phase of the framework you are in may help you choose the best prompt to move forward (see the table below in @sec-phases). \n\n```{mermaid}\n%%| label: fig-phases\n%%| fig-cap: \"Four phases of problem solving.\"\n%%| fig-alt: \"Four-step flow: Understand → Plan → Carry out → Look back.\"\n%%{init: { \"flowchart\": { \"htmlLabels\": false } }}%%\n\nflowchart TB\n  U[**Understand the problem**<br>Unknowns, Data, Constraints]\n  P[**Devise a plan**<br>Heuristics]\n  C[**Carry out the plan**<br>Justify steps, Check subgoals]\n  L[**Look back**<br>Verify, Reflect, Generalise]\n\n  U --> P --> C --> L\n```\n\nThe phases are roughly as follows. First, **understand the problem**: identify givens, unknowns, and conditions; restate it in your own words; sketch, tabulate, or probe small cases. Next, **devise a plan** by choosing a route. Possible routes are to work backward, look for patterns, simplify or specialise, use symmetry or invariants, introduce an auxiliary object, estimate or bound, change representation, or reduce to a known problem (we will investigate these problem solving _heuristics_ later in @sec-heuristics). Then **carry out _your_ plan**: execute cleanly, justify each step, check subgoals, and pivot if a step stalls. Finally, **look back**: verify the result, test edge cases, assess efficiency and clarity, and capture the key idea. The final phase is _essential_. Use the framework to reflect on what you learned so your future problem solving gets faster and more reliable.\n\n## Phases of problem solving {#sec-phases}\n\nUse Table @tbl-phases as a working checklist and a reflection guide, not a rigid recipe. As you tackle an open-ended problem, you might find that you are \"stuck\". First, don't panic! Decide which phase of the problem solving framework you are in and scan the prompts in that row. Answering the prompt may lead to a concrete next action. Reflect on this new action for a few minutes; if it stalls, return to the table, pick a different prompt, or take a break. Over time, the prompts will become more familiar and the process of solving an open-ended problme will be less daunting. \n\n\n::: {#tbl-phases .cell layout-align=\"center\" tbl-cap='Phases of problem solving, adapted from [@Polya:1945hu, pp. xvi-xvii].'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table table-striped table-condensed\" style=\"margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> Phase </th>\n   <th style=\"text-align:left;\"> Purpose </th>\n   <th style=\"text-align:left;\"> Prompts to ask yourself </th>\n   <th style=\"text-align:left;\"> Useful tactics </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 12em; \"> Understanding the problem </td>\n   <td style=\"text-align:left;width: 16em; \"> For a problem to find, understand the problem by making the unknown, data, and conditions precise. </td>\n   <td style=\"text-align:left;width: 24em; \"> What is unknown? What is given or what are the data? What conditions/constraints apply? Can I restate the task in my own words? What do small or extreme cases look like? What diagram/notation will help? </td>\n   <td style=\"text-align:left;width: 24em; \"> Define symbols. Draw a figure. List constraints. Test tiny cases. Identify edge cases. Rephrase the question. Separate various parts of the condition. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 12em; \"> Devising a plan </td>\n   <td style=\"text-align:left;width: 16em; \"> Find the connection between the data and the unknown that provides a path towards a solution. </td>\n   <td style=\"text-align:left;width: 24em; \"> Have I seen the problem before? Have I seen the same problem in a slightly different form? Do I know a related problem? Do I know a theorem that might be useful? Can I work backward from the goal? Can I simplify/specialise first? What pattern, invariant, or symmetry might apply? Can I introduce an auxiliary element or change representation? Did I use all the data in devising my plan? Did I account for all the conditions? </td>\n   <td style=\"text-align:left;width: 24em; \"> Heuristics such as analogy; special/edge cases; generalisation; using invariants and symmetry; bounding/estimating; pigeonhole; substitution; set up equations or a new diagram. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 12em; \"> Carry out your plan </td>\n   <td style=\"text-align:left;width: 16em; \"> Carry out plan, checking each step! </td>\n   <td style=\"text-align:left;width: 24em; \"> Would I be able to clearly explain that the step is correct? Can I prove that it is correct? Does each step follow from assumptions or known results? What subgoal can I verify now? If a step fails, which alternative route will I try next? </td>\n   <td style=\"text-align:left;width: 24em; \"> Justify steps. Prove lemmas. Compute carefully. Frequently take stock (checkpoint). Pivot quickly if a line of attack stalls. Don't panic. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 12em; \"> Look back </td>\n   <td style=\"text-align:left;width: 16em; \"> Validate the result and reflect on learning. </td>\n   <td style=\"text-align:left;width: 24em; \"> Can I check the result? Can you explain your arguments? Does the result meet all conditions? Any counterexamples? Is it complete/optimal? Can I shorten or generalise the solution? Can I derive the result differently? What key idea made it work, and where else could it apply? </td>\n   <td style=\"text-align:left;width: 24em; \"> Record the central insight. Phases of the framework. Prompts answered. Heuristics used and how. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}